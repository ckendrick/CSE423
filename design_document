Team Members: Coleman Kendrick, Eva Domschott, Nathan Bockisch, Brandon Bicknell

Program Overview

To compile program:
mkdir build
cd build
cmake ..
make

To use the program, run ./scanner -f <file>

Additional flags include:
-i: Print tokens
-a: Print AST

The tokenizer separates punctuation characters like braces, colons, semicolons, and commas. It also supports multi-character operators like ++ and !=. It recognizes all of the C keywords and separates them out. 

Usage

Design Discussion

The tokenizer uses regex to split out tokens by comments, keywords, identifiers, other words, string literals in quotes, two character operators, single character operators, and punctuation charcters like colons, braces, semicolons, and commas. Removing comments from selection initially gave trouble, so they are added to the list of tokens first and then removed afterwards. The source file is read into a string object via a function in the Scanner class, then passed to the tokenizer function as a string where it is split through regex and added to a vector object. The individual tokens are stored in a custom struct that holds the contents of the token as a string and the general type of token it is in an enumerator. 

The parser loads a set of grammar rules from a given file. Each rule is parsed to find non-terminals, literals (punctuation, language characteristics), language specific keywords (like int and return), and character classes which determine proper identifiers. 

The parser uses a breadth first search to find all possible results from each token, and determining the order from there. Is not complete.

The AST is a binary tree. Insertion is done by taking in a vector of the tokens in a top down order. So far only a basic program can be inserted. Waiting on the parser for some of the details. Since the parser isn't finished, an array of strings in top down order is being passed to it to show insertion. 

Language Specification

Various features of the C- language are implemented in the grammar, but are not actually being used or recognized by the parser at the moment.