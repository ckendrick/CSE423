# This defines a simple grammar for the subset of C

# ---------
# Syntax:
# ---------
# Things surrounded by (( )) means a keyword
# Things surrounded by [[ ]] means a character literal
# Things surrounded by {{ }} means a token class (ID = letter letgid*, NUMCONST = digit+, etc.. see C-minus grammar)
# ---------

program = declarationList
declarationList = declarationList declaration | declaration
declaration = varDeclaration | funDeclaration

varDeclaration = typeSpecifier varDeclList [[;]]
varDeclList = varDeclList [[,]] varDeclInitialize | varDeclInitialize
varDeclInitialize = varDeclId | varDeclId [[:]] simpleExpression
varDeclId = {{ID}} | {{ID}} [[[]] {{NUMCONST}} [[]]]
typeSpecifier = ((int)) | ((void))

funDeclaration = typeSpecifier {{ID}} [[(]] params [[)]] statement | {{ID}} [[(]] params [[)]] statement
params = paramList | {{epsilon}}
paramList = paramList [[;]] paramTypeList | paramTypeList
paramTypeList = typeSpecifier paramIdList
paramIdList = paramIdList [[,]] paramId | paramId
paramId = {{ID}} | {{ID}} [[[]] [[]]]

statement = expressionStmt | compoundStmt | selectionStmt | returnStmt | breakStmt
expressionStmt = expression [[;]] | [[;]]
compoundStmt = [[{]] localDeclarations statementList [[}]]
localDeclarations = localDeclarations typeSpecifier | {{epsilon}}
statementList = statementList statement | {{epsilon}}
elseList = ((else)) simpleExpression [[{]] statement [[}]] | {{epsilon}}
selectionStmt = ((if)) simpleExpression [[{]] statement [[}]] | ((if)) simpleExpression [[{]] statement [[}]] elseList
returnStmt = ((return)) [[;]] | ((return)) expression [[;]]
breakStmt = ((break)) [[;]]

expression = mutable [[=]] expression | mutable [[+=]] expression | mutable [[-=]] expression | mutable [[*=]] expression | mutable [[/=]] expression | mutable [[++]] | mutable [[--]] | simpleExpression
simpleExpression = simpleExpression ((or)) andExpression | andExpression
andExpression = andExpression ((and)) unaryRelExpression | unaryRelExpression
unaryRelExpression = ((not)) unaryRelExpression | relExpression
relExpression = sumExpression relop sumExpression | sumExpression
relop = [[<=]] | [[<]] | [[>]] | [[>=]] | [[==]] | [[!=]]
sumExpression = sumExpression sumop mulExpression | mulExpression
sumop = [[+]] | [[-]]
mulExpression = mulExpression mulop unaryExpression | unaryExpression
mulop = [[*]] | [[/]] | [[%]]
unaryExpression = unaryop unaryExpression | factor
unaryop = [[-]] | [[*]] | [[?]]
factor = immutable | mutable
mutable = {{ID}} | mutable [[[]] expression [[]]]
immutable = [[(]] expression [[)]] | call | constant
call = {{ID}} [[(]] args [[)]]
args = argList | {{epsilon}}
argList = argList [[,]] expression | expression
constant = {{NUMCONST}}

